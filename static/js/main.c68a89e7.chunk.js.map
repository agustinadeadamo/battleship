{"version":3,"sources":["Config/Middlewares.js","Actions/Actions.js","Reducers/Reducer.js","Config/Store.js","Components/PrivateRoute/PrivateRoute.jsx","MainStyles/Variables.js","Components/Input/style.jsx","Components/Input/Input.jsx","Components/Grid/style.js","Components/Grid/Grid.jsx","Views/StartScreen/style.js","Views/StartScreen/StartScreen.jsx","Components/PopUp/style.js","Components/PopUp/PopUp.jsx","Views/GameScreen/style.js","Views/GameScreen/GameScreen.jsx","Views/EndGameScreen/style.js","Views/EndGameScreen/EndGameScreen.jsx","Config/Routes.jsx","MainStyles/GlobalStyle.js","App.jsx","index.jsx"],"names":["Middlewares","UPDATE_USER_GRID","UPDATE_COMPUTER_GRID","UPDATE_USER_NAME","UPDATE_GAME_STARTED","UPDATE_WINNER","updateUserName","payload","type","InitialState","user","gameStarted","gridWidth","gridHeight","userGrid","computerGrid","winner","ships","name","spaces","taken","status","id","enable","selected","directions","Reducer","state","action","Store","createStore","Reducers","composeWithDevTools","applyMiddleware","PrivateRoute","props","path","component","useSelector","data-testid","exact","to","Colors","grey","orange","lightBlue","red","green","white","InputComponent","styled","input","MessageError","p","Input","value","maxLength","placeholder","onChangeValue","messageError","showMessageError","onChange","event","valueInput","target","handleChange","className","defaultProps","GridComponent","div","enableGrid","Grid","gridName","onClickCell","grid","map","cell","role","onClick","cellContent","StartScreenContainer","StartScreen","useState","updateUserGrid","updateComputerGrid","showMessageErrorUser","updateShowMessageErrorUser","history","useHistory","dispatch","useDispatch","prevUserGridRef","useRef","prevComputerGridRef","generateShip","ship","Array","isArray","direction","randomDirection","Math","floor","random","length","current","lastCellAvailable","randomStart","isTaken","some","index","isAtRightEdge","isAtLeftEdge","modifiedInitialGrid","JSON","parse","stringify","forEach","generateInitialGrid","initialGrid","i","push","useEffect","initialUserGrid","iterateShips","gridForShips","newGridForShips","userGridWithShips","computerGridWithShips","onClickStartGame","validated","updateComputerGridInReducer","updateGameStarted","onClickChangePositions","PopUpComponent","PopUp","copy","show","hidePopUp","timer","setTimeout","clearTimeout","GameScreenContainer","userGridGame","computerGridGame","enableUserGrid","updateEnableUserGrid","shipsSelectedUser","updateShipsSelectedUser","shipsSelectedComputer","updateShipsSelectedComputer","copyPopUp","updateCopyPopUp","showPopUp","updateShowPopUp","userTurn","updateUserTurn","prevComputerOnClickCell","prevComputerOnClickTaken","prevComputerOnClickCellValidfirst","prevOptionSelected","validateAllShipsWereDestroyed","shipsPlayer","allDestroyed","modifieGridAndShips","gridToModifie","shipsToModifie","cellClickId","foundShip","cpuPlayer","destroyed","shipSelected","copyGridToModifie","copyShip","space","cellCopy","redirect","player","onClickCellComputer","modifiedGridComputer","modifiedShipsComputer","computerClick","randomClick","options","1","2","3","4","Object","keys","generateComputerClick","undefined","gridAndShipsComputerModified","modifiedUserGrid","modifiedUserShips","gridAndShipsUserModified","onClickCellUser","EndGameScreen","Routes","GameScreen","GlobalStyle","createGlobalStyle","App","store","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c68a89e7.chunk.js","sourcesContent":["/**\n * @desc Dependencies\n */\nimport logger from 'redux-logger';\n\n/**\n * @desc Middlewares\n */\nexport default (() => {\n  /**\n   * @desc Indicates enviroment.\n   */\n  const isDevelopment = process.env.NODE_ENV === 'development';\n\n  const Middlewares = [];\n\n  // Middlewares of development\n  if (isDevelopment) {\n    // Logger of redux.\n    Middlewares.push(logger);\n  }\n\n  return Middlewares;\n})();\n","/**\n * @desc Actions\n */\nexport const UPDATE_USER_GRID = 'UPDATE_USER_GRID';\nexport const UPDATE_COMPUTER_GRID = 'UPDATE_COMPUTER_GRID';\nexport const UPDATE_USER_NAME = 'UPDATE_USER_NAME';\nexport const UPDATE_GAME_STARTED = 'UPDATE_GAME_STARTED';\nexport const UPDATE_WINNER = 'UPDATE_WINNER';\n\n/**\n * @desc Updates user name\n *\n * @param { Object } payload\n *\n * @return { Object }\n */\nexport const updateUserName = (payload) => ({\n  type: UPDATE_USER_NAME,\n  payload,\n});\n\n/**\n * @desc Updates user grid\n *\n * @param { Array } payload\n *\n * @return { Object }\n */\nexport const updateUserGridInReducer = (payload) => ({\n  type: UPDATE_USER_GRID,\n  payload,\n});\n\n/**\n * @desc Updates computer grid\n *\n * @param { Array } payload\n *\n * @return { Object }\n */\nexport const updateComputerGridInReducer = (payload) => ({\n  type: UPDATE_COMPUTER_GRID,\n  payload,\n});\n\n/**\n * @desc Updates game status\n *\n * @param { Boolean } payload\n *\n * @return { Object }\n */\nexport const updateGameStarted = (payload) => ({\n  type: UPDATE_GAME_STARTED,\n  payload,\n});\n\n/**\n * @desc Updates winner name\n *\n * @param { Boolean } payload\n *\n * @return { Object }\n */\nexport const updateWinner = (payload) => ({\n  type: UPDATE_WINNER,\n  payload,\n});\n","/**\n * @desc Actions\n */\nimport {\n  UPDATE_USER_GRID,\n  UPDATE_COMPUTER_GRID,\n  UPDATE_USER_NAME,\n  UPDATE_GAME_STARTED,\n  UPDATE_WINNER,\n} from '../Actions/Actions';\n\n/**\n * @desc Initial State\n */\nconst InitialState = {\n  user: '',\n  gameStarted: false,\n  gridWidth: 10,\n  gridHeight: 10,\n  userGrid: [],\n  computerGrid: [],\n  winner: '',\n  ships: [\n    {\n      name: 'carrier',\n      spaces: ['carrier-1-1', 'carrier-1-2', 'carrier-1-3', 'carrier-1-4'],\n      taken: false,\n      status: 'empty',\n      id: 1,\n      enable: true,\n      selected: 0,\n      directions: [\n        [0, 1, 2, 3],\n        [0, 10, 10 * 2, 10 * 3],\n      ],\n    },\n    {\n      name: 'cruisers',\n      spaces: ['cruisers-1-1', 'cruisers-1-2', 'cruisers-1-3'],\n      taken: false,\n      status: 'empty',\n      id: 2,\n      enable: true,\n      selected: 0,\n      directions: [\n        [0, 1, 2],\n        [0, 10, 10 * 2],\n      ],\n    },\n    {\n      name: 'cruisers',\n      spaces: ['cruisers-2-1', 'cruisers-2-2', 'cruisers-2-3'],\n      taken: false,\n      status: 'empty',\n      id: 3,\n      enable: true,\n      selected: 0,\n      directions: [\n        [0, 1, 2],\n        [0, 10, 10 * 2],\n      ],\n    },\n    {\n      name: 'cruisers',\n      spaces: ['cruisers-3-1', 'cruisers-3-2', 'cruisers-3-3'],\n      taken: false,\n      status: 'empty',\n      id: 4,\n      enable: true,\n      selected: 0,\n      directions: [\n        [0, 1, 2],\n        [0, 10, 10 * 2],\n      ],\n    },\n    {\n      name: 'submarine',\n      spaces: ['submarine-1', 'submarine-2'],\n      taken: false,\n      status: 'empty',\n      id: 5,\n      enable: true,\n      selected: 0,\n      directions: [\n        [0, 1],\n        [0, 10],\n      ],\n    },\n  ],\n};\n\n/**\n * @desc Reducer.\n *\n * @param { Object } state\n * @param { Object } action\n *\n * @return { Object }\n */\nconst Reducer = (state = InitialState, action) => {\n  switch (action.type) {\n    case UPDATE_USER_GRID:\n      return {\n        ...state,\n        userGrid: action.payload,\n      };\n\n    case UPDATE_COMPUTER_GRID:\n      return {\n        ...state,\n        computerGrid: action.payload,\n      };\n\n    case UPDATE_USER_NAME:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case UPDATE_GAME_STARTED:\n      return {\n        ...state,\n        gameStarted: action.payload,\n      };\n\n    case UPDATE_WINNER:\n      return {\n        ...state,\n        winner: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default Reducer;\n","/**\n * @desc Dependencies\n */\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n/**\n * @desc Middlewares\n */\nimport Middlewares from './Middlewares';\n\n/**\n * @desc Reducers\n */\nimport Reducers from '../Reducers/Reducer';\n\n/**\n * @desc Store\n */\nconst Store = createStore(Reducers, composeWithDevTools(applyMiddleware(...Middlewares)));\n\nexport default Store;\n","/**\n * @desc Dependencies\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nconst PrivateRoute = (props) => {\n  const {\n    path,\n    component,\n  } = props;\n\n  const user = useSelector((state) => state.user);\n\n  return (\n    user !== null && user !== '' ? <Route data-testid=\"private-route\" exact path={path} component={component} /> : <Redirect to=\"/\" />\n  );\n};\n\nPrivateRoute.propTypes = {\n  path: PropTypes.string.isRequired,\n  component: PropTypes.func.isRequired,\n};\n\nexport default PrivateRoute;\n","const Colors = {\n  grey: '#A6A5A5',\n  orange: '#FC8F29',\n  lightBlue: '#29C9FC',\n  red: '#F92B2B',\n  green: '#52CEB7',\n  white: '#FFFFFF',\n};\n\nexport default Colors;\n","/**\n * @desc Dependencies\n */\nimport styled from 'styled-components';\n\n/**\n * @desc Variables\n */\nimport Colors from '../../MainStyles/Variables';\n\nexport const InputComponent = styled.input`\n    width: 100%;\n    border: 1px solid ${Colors.grey};\n    color: ${Colors.grey};\n    height: 40px;\n    padding: 0 10px;\n`;\n\nexport const MessageError = styled.p`\n    color: ${Colors.red};\n`;\n\nexport default InputComponent;\n","/**\n * @desc Dependencies\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @desc Styles\n */\nimport { InputComponent, MessageError } from './style';\n\nconst Input = (props) => {\n  // Destructuring props\n  const {\n    value,\n    maxLength,\n    placeholder,\n    type,\n    onChangeValue,\n    messageError,\n    showMessageError,\n  } = props;\n\n  /**\n   * Function that is executed every time value in input changes\n   * @param {EventTarget} event\n   */\n  const handleChange = (event) => {\n    const valueInput = event.target.value;\n    onChangeValue(valueInput);\n  };\n\n  return (\n    <>\n      <InputComponent\n        onChange={(event) => handleChange(event)}\n        value={value}\n        maxLength={maxLength}\n        type={type}\n        placeholder={placeholder}\n        data-testid=\"input-component\"\n      />\n      {\n        showMessageError && (\n          <MessageError\n            data-testid=\"message-error\"\n            className=\"test\"\n          >\n            {messageError}\n          </MessageError>\n        )\n      }\n    </>\n  );\n};\n\nInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  maxLength: PropTypes.number,\n  placeholder: PropTypes.string,\n  type: PropTypes.string,\n  onChangeValue: PropTypes.func.isRequired,\n  messageError: PropTypes.string,\n  showMessageError: PropTypes.bool,\n};\n\nInput.defaultProps = {\n  maxLength: 100,\n  placeholder: '',\n  type: 'text',\n  messageError: '',\n  showMessageError: false,\n};\n\nexport default Input;\n","/**\n * @desc Dependencies\n */\nimport styled from 'styled-components';\n\n/**\n * @desc Variabled\n */\nimport Colors from '../../MainStyles/Variables';\n\nexport const GridComponent = styled.div`\n  width: 100%;\n  display: inline-block;\n  position: relative;\n  display: flex;\n  flex-wrap: wrap;\n\n  &:before {\n    content: \"\";\n    display: block;\n    padding-top: 100%;\n  }\n\n  .content {\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    display: flex;\n    flex-wrap: wrap;\n  }\n  \n  &.grid-user {\n    .hit {\n      background-color: ${Colors.orange};\n    }\n\n    .missed {\n      background-color: ${Colors.lightBlue};\n    }\n\n    .destroyed {\n      background-color: ${Colors.red};\n    }\n\n    .taken {\n      background-color: ${Colors.grey};\n    }\n  }\n\n  .cell {\n    width: 10%;\n    height: 10%;\n    ${(props) => props.enableGrid && 'cursor: pointer;'}\n\n    &.empty {\n      border: 2px solid ${Colors.grey};\n    }\n\n  }\n`;\n\nexport default GridComponent;\n","/**\n * @desc Dependencies\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @desc Styles\n */\nimport {\n  GridComponent,\n} from './style';\n\nconst Grid = (props) => {\n  // Destructuring props\n  const {\n    gridName,\n    onClickCell,\n    enableGrid,\n    grid,\n  } = props;\n\n  return (\n    <div>\n      <GridComponent\n        enableGrid={enableGrid}\n        data-testid=\"grid-component\"\n        gridName={gridName}\n        className={`grid-${gridName}`}\n      >\n        <div className=\"content\">\n          {\n            grid && grid.map((cell) => (\n              <div\n                key={cell.id}\n                role=\"presentation\"\n                onClick={() => enableGrid && onClickCell(cell)}\n                id={cell.id}\n                className={`cell ${cell.status}`}\n                data-testid={`cell-component ${cell.cellContent}`}\n              />\n            ))\n          }\n        </div>\n      </GridComponent>\n    </div>\n  );\n};\n\nGrid.propTypes = {\n  gridName: PropTypes.string.isRequired,\n  onClickCell: PropTypes.func,\n  enableGrid: PropTypes.bool,\n  grid: PropTypes.arrayOf(PropTypes.object),\n};\n\nGrid.defaultProps = {\n  enableGrid: false,\n  onClickCell: () => {},\n  grid: [],\n};\n\nexport default Grid;\n","/**\n * @desc Dependencies\n */\nimport styled from 'styled-components';\n\nconst StartScreenContainer = styled.div`\n  width: 100%;\n\n  .title, .instructions {\n    width: 100%;\n    text-align: center;\n    margin: 30px 0;\n  }\n\n  .configuration {\n    width: 90%;\n    max-width: 1240px;\n    margin: 0 auto;\n    display: flex;\n    justify-content: space-arround;\n    flex-wrap: wrap;\n\n    .first-column {\n      width: 100%;\n  \n      @media (min-width: 1140px) {\n        width: 70%;\n      }\n  \n      .grid-container {\n        width: 100%;\n        max-width: 600px;\n        margin: 20px auto;\n  \n        @media (min-width: 1140px) {\n          margin: 0;\n        }\n      }\n    }\n  \n    .second-column {\n      width: 100%;\n  \n      @media (min-width: 1140px) {\n        width: 30%;\n      }\n  \n      .actions {\n        width: 100%;\n        max-width: 600px;\n        margin: 20px auto;\n  \n        @media (min-width: 1140px) {\n          margin: 0;\n        }\n\n        .buttons-container {\n          margin: 30px;\n        }\n      }\n    }\n  }\n`;\n\nexport default StartScreenContainer;\n","/**\n * @desc Dependencies\n */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\n/**\n * @desc Actions\n */\nimport {\n  updateUserGridInReducer, updateComputerGridInReducer, updateUserName, updateGameStarted\n} from '../../Actions/Actions';\n\n/**\n * @desc Components\n */\nimport Input from '../../Components/Input/Input';\nimport Grid from '../../Components/Grid/Grid';\n\n/**\n * @desc Styled Components\n */\nimport StartScreenContainer from './style';\n\nconst StartScreen = () => {\n  // State\n  const [userGrid, updateUserGrid] = useState(null);\n  const [computerGrid, updateComputerGrid] = useState(null);\n  const [showMessageErrorUser, updateShowMessageErrorUser] = useState(false);\n\n  // Router\n  const history = useHistory();\n\n  // Store\n  const gridWidth = useSelector((state) => state.gridWidth);\n  const gridHeight = useSelector((state) => state.gridHeight);\n  const user = useSelector((state) => state.user);\n  const ships = useSelector((state) => state.ships);\n  const dispatch = useDispatch();\n\n  // Refs\n  const prevUserGridRef = useRef([]);\n  const prevComputerGridRef = useRef([]);\n\n  /**\n   * Function that generates each ship in the grid\n   * @param { Object } ship\n   * @param { Array } grid\n   *\n   * @return { Array }\n   */\n  const generateShip = (ship, grid) => {\n    // Validates that gris is an array\n    if (Array.isArray(grid)) {\n      // Defines direction by default\n      let direction = 1;\n      // Choose horizontaly or vertically direction randomly\n      const randomDirection = Math.floor(Math.random() * ship.directions.length);\n      // According to the random direction selected, choose the ship with the specified direciton\n      const current = ship.directions[randomDirection];\n\n      if (randomDirection === 0) {\n        // This determinates the spaces between each cell according to the direction selected\n        direction = 1;\n      }\n      if (randomDirection === 1) {\n        // This determinates the spaces between each cell according to the direction selected\n        direction = 10;\n      }\n\n      // Defines the las cell available according to the position selected\n      const lastCellAvailable = grid.length - (ship.directions[0].length * direction);\n      // Defines the random start of the ship\n      const randomStart = Math.floor(Math.random() * lastCellAvailable);\n      // Defines if the cell is taken\n      const isTaken = current.some((index) => grid[randomStart + index].taken);\n      // Defines if the random start has enough spaces on the right\n      const isAtRightEdge = current.some((index) => (randomStart + index) % 10 === 10 - 1);\n      // Defines if the random start has enough spaces on the right\n      const isAtLeftEdge = current.some((index) => (randomStart + index) % 10 === 0);\n\n      const modifiedInitialGrid = JSON.parse(JSON.stringify(grid));\n\n      if (!isTaken && !isAtRightEdge && !isAtLeftEdge) {\n        // Creates the ship in the grid\n        current.forEach((value, index) => {\n          modifiedInitialGrid[randomStart + value].taken = true;\n          modifiedInitialGrid[randomStart + value].status = 'taken';\n          modifiedInitialGrid[randomStart + value].cellContent = ship.spaces[index];\n        });\n\n        return modifiedInitialGrid;\n      }\n\n      // If it's taken or does not has enough spaces on the right and on the left\n      // ship will be generated again\n      return generateShip(ship, grid);\n    }\n\n    return [];\n  };\n\n  /**\n   * Function that generates an initial and empty grid\n   *\n   * @return { Array }\n   */\n  const generateInitialGrid = () => {\n    const initialGrid = [];\n    // Creates grid cells with it's properties\n    for (let i = 0; i < gridWidth * gridHeight; i += 1) {\n      initialGrid.push({\n        id: i,\n        status: 'empty',\n        taken: false,\n        cellContent: 'sea',\n      });\n    }\n\n    return initialGrid;\n  };\n\n  /**\n   * Hook that is executed in first mount\n   */\n  useEffect(() => {\n    // Generates initial grid\n    const initialUserGrid = generateInitialGrid();\n\n    // Updates userGrid and computerGrid\n    updateUserGrid(initialUserGrid);\n    updateComputerGrid(initialUserGrid);\n  }, []);\n\n  /**\n   * Function that iterates the ship to generate each one\n   * @param {*} gridForShips\n   *\n   * @return { Array }\n   */\n  const iterateShips = (gridForShips) => {\n    let newGridForShips = gridForShips;\n    ships.forEach((ship) => {\n      newGridForShips = generateShip(ship, newGridForShips);\n    });\n    return newGridForShips;\n  };\n\n  /**\n   * Hook that is executed on first render and every time userGrid or ships update\n   */\n  useEffect(() => {\n    // Validates if userGrid is an array and has content, if ships is an array and has\n    // content and if the prev value for userGrid was an empty array\n    if ((Array.isArray(userGrid) && userGrid.length > 0\n    && Array.isArray(ships) && ships.length > 0\n    && prevUserGridRef.current.length === 0)) {\n      // Updates prev value of userGrid\n      prevUserGridRef.current = userGrid;\n      // Iterates ship\n      const userGridWithShips = iterateShips(userGrid);\n      // Updates state\n      updateUserGrid(userGridWithShips);\n    }\n  }, [userGrid, ships]);\n\n  /**\n   * Hook that is executed on first render and every time computerGrid and ships update\n   */\n  useEffect(() => {\n    // Validates if computerGrid is an array and has content, if ships is an array and has\n    // content and if the prev value for computerGrid was an empty array\n    if ((Array.isArray(computerGrid) && computerGrid.length > 0\n    && Array.isArray(ships) && ships.length > 0\n    && prevComputerGridRef.current.length === 0)) {\n      // Updates prev value of computerGrid\n      prevComputerGridRef.current = computerGrid;\n      // Iterates ship\n      const computerGridWithShips = iterateShips(computerGrid);\n      // Updates state\n      updateComputerGrid(computerGridWithShips);\n    }\n  }, [computerGrid, ships]);\n\n  /**\n   * Function that is executed when \"Start game\" button is selected\n   */\n  const onClickStartGame = () => {\n    let validated = true;\n\n    // Validates if there is a user added\n    if (user === '') {\n      validated = false;\n      updateShowMessageErrorUser(true);\n    }\n\n    // If user is added then updates store and redirects\n    if (validated) {\n      dispatch(updateUserName(user));\n      dispatch(updateUserGridInReducer(userGrid));\n      dispatch(updateComputerGridInReducer(computerGrid));\n      dispatch(updateGameStarted(true));\n      history.push('/game');\n    }\n  };\n\n  /**\n   * Function that is executed when \"position ships\" is clicked\n   */\n  const onClickChangePositions = () => {\n    // Updates prev value for user Grid\n    prevUserGridRef.current = [];\n    // Generates initial grid\n    const initialUserGrid = generateInitialGrid();\n    // Updates state\n    updateUserGrid(initialUserGrid);\n  };\n\n  /**\n   * Function that is executed when input changes value\n   */\n  const onChangeUserNameInput = (value) => {\n    // If value is different to an empty string it hides the error message\n    if (value !== '') {\n      updateShowMessageErrorUser(false);\n    }\n\n    // Updates store\n    dispatch(updateUserName(value));\n  };\n\n  return (\n    <StartScreenContainer>\n      <div className=\"title\">\n        <h1>Battleship</h1>\n        <h3>Configuration</h3>\n      </div>\n      <div className=\"instructions\">\n        <ul>\n          <li>Enter your user name.</li>\n          <li>Place you ships on the board the way you prefer.</li>\n          <li>Start the game !</li>\n        </ul>\n      </div>\n      <div className=\"configuration\">\n        <div className=\"first-column\">\n          <div data-testid=\"grid-container\" className=\"grid-container\">\n            <Grid data-testid=\"grid-grid\" enableGrid={false} grid={userGrid} gridName=\"user\" />\n          </div>\n        </div>\n        <div className=\"second-column\" data-testid=\"actions-container\">\n          <div className=\"actions\">\n            <Input messageError=\"You must add a user name\" showMessageError={showMessageErrorUser} data-testid=\"username-input\" placeholder=\"Insert user name here\" onChangeValue={(valueInput) => onChangeUserNameInput(valueInput)} value={user} />\n            <div className=\"buttons-container\">\n              <button data-testid=\"change-positions-button\" type=\"button\" onClick={() => onClickChangePositions()}> Change position </button>\n              <button className=\"dark\" type=\"button\" data-testid=\"start-game\" onClick={() => onClickStartGame()}>Start Game</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </StartScreenContainer>\n  );\n};\n\nexport default StartScreen;\n","/**\n * @desc Dependencies\n */\nimport styled from 'styled-components';\nimport Colors from '../../MainStyles/Variables';\n\n/**\n * @desc Variabled\n */\n\nconst PopUpComponent = styled.div`\n  width: 100%;\n  max-width: 300px;\n  height: 50px;\n  position: fixed;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  color: ${Colors.white};\n  font-size: 13px;\n  background: ${Colors.green};\n  font-weight: 600;\n  border-radius: 6px;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &.show {\n    top: 0; \n    transition: all 0.5s ease 0s; \n    -webkit-transition: all 0,5s ease 0s; \n  }\n\n  &.hide {\n    top: -50%; transition: all 0.5s ease 0s; -webkit-transition: all 0.5s ease 0s;\n  }\n`;\n\nexport default PopUpComponent;\n","/**\n * @desc Dependencies\n */\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @desc Styles\n */\nimport PopUpComponent from './style';\n\nconst PopUp = (props) => {\n  // Destructuring props\n  const {\n    copy,\n    show,\n    hidePopUp,\n  } = props;\n\n  /**\n   * Hook that is executed every time show is updates\n   */\n  useEffect(() => {\n    let timer = null;\n\n    // Validates if show is true\n    if (show) {\n      // Generates timeout that will hide pop up after 3 seconds\n      timer = setTimeout(() => {\n        hidePopUp();\n      }, 1000);\n    }\n\n    // Clears timeout\n    return () => clearTimeout(timer);\n  }, [show]);\n\n  return (\n    <PopUpComponent data-testid=\"popUp-component\" className={`${show ? 'show' : 'hide'}`} show={show}>\n      {copy}\n    </PopUpComponent>\n  );\n};\n\nPopUp.propTypes = {\n  copy: PropTypes.string.isRequired,\n  show: PropTypes.bool.isRequired,\n  hidePopUp: PropTypes.func.isRequired,\n};\n\nexport default PopUp;\n","/**\n * @desc Dependencies\n */\nimport styled from 'styled-components';\n\nconst GameScreenContainer = styled.div`\nwidth: 90%;\nmax-width: 1240px;\nmargin: 0 auto;\n\n  .title {\n    width: 100%;\n    text-align: center;\n    margin: 30px 0;\n  }\n\n  .player-turn {\n    text-align: center;\n  }\n\n  .grids-container {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n\n    .grid-name {\n      margin: 20px 0;\n      text-align: center;\n    }\n\n    .first-column, .second-column {\n      width: 100%;\n  \n      @media (min-width: 1140px) {\n        width: 45%;\n      }\n  \n      .grid-container {\n        width: 100%;\n        max-width: 600px;\n        margin: 20px auto;\n  \n        @media (min-width: 1140px) {\n          margin: 20px 0;\n        }\n      }\n    }\n  }\n\n  .button-row {\n    width: 100%;\n\n    .button-container {\n      width: 30%;\n      max-width: 300px;\n      margin: 30px auto;\n    }\n  }\n`;\n\nexport default GameScreenContainer;\n","/**\n * @desc Dependencies\n */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\n/**\n * @desc Actions\n */\nimport {\n  updateWinner,\n} from '../../Actions/Actions';\n\n/**\n * @desc Components\n */\nimport PopUp from '../../Components/PopUp/PopUp';\nimport Grid from '../../Components/Grid/Grid';\n\n/**\n * @desc Styled Components\n */\nimport GameScreenContainer from './style';\n\nconst StartScreen = () => {\n  // State\n  const [userGridGame, updateUserGrid] = useState(null);\n  const [computerGridGame, updateComputerGrid] = useState(null);\n  const [enableUserGrid, updateEnableUserGrid] = useState(true);\n  const [shipsSelectedUser, updateShipsSelectedUser] = useState([]);\n  const [shipsSelectedComputer, updateShipsSelectedComputer] = useState([]);\n  const [copyPopUp, updateCopyPopUp] = useState('');\n  const [showPopUp, updateShowPopUp] = useState(false);\n  const [userTurn, updateUserTurn] = useState(true);\n\n  // Store\n  const userGrid = useSelector((state) => state.userGrid);\n  const computerGrid = useSelector((state) => state.computerGrid);\n  const user = useSelector((state) => state.user);\n  const ships = useSelector((state) => state.ships);\n  const dispatch = useDispatch();\n\n  // Ref\n  const prevComputerOnClickCell = useRef(0);\n  const prevComputerOnClickTaken = useRef(false);\n  const prevComputerOnClickCellValidfirst = useRef(0);\n  const prevOptionSelected = useRef(0);\n\n  // Router\n  const history = useHistory();\n\n  /**\n   * Hook that is executed on first renders\n   */\n  useEffect(() => {\n    // Updates state con store data\n    updateUserGrid(userGrid);\n    updateComputerGrid(computerGrid);\n    updateShipsSelectedUser(ships);\n    updateShipsSelectedComputer(ships);\n  }, [userGrid, computerGrid]);\n\n  /**\n   * Function that is executed after one ship has been destroyed, validates\n   * if all the ships from that user where destroyed\n   *\n   * @param { Array } shipsPlayer\n   *\n   * @return { Boolean }\n   */\n  const validateAllShipsWereDestroyed = (shipsPlayer) => {\n    let allDestroyed = true;\n    // Iterates ships\n    shipsPlayer.forEach((ship) => {\n      // If any of the ships have not been destroyed modificates the value to false\n      if (ship.selected !== ship.spaces.length) {\n        allDestroyed = false;\n      }\n    });\n\n    return allDestroyed;\n  };\n\n  /**\n   * Function that is executed after an onclick on user or computer grid is generated\n   * Modifies the ships and the grid according to what has been found in cell selected\n   *\n   * @param { Array } gridToModifie\n   * @param { Array } shipsToModifie\n   * @param { Number } cellClickId\n   * @param { Boolean } foundShip\n   * @param { String } cellContent\n   * @param { Boolean } cpuPlayer\n   *\n   * @return { Object }\n   */\n  const modifieGridAndShips = (gridToModifie, shipsToModifie,\n    cellClickId, foundShip, cellContent, cpuPlayer = false) => {\n    // Values by default\n    let destroyed = false;\n    let shipSelected = 0;\n    let allDestroyed = false;\n\n    const copyGridToModifie = gridToModifie;\n\n    // Validates if a ship has been found on cell selected\n    if (foundShip) {\n      // Iterates ships\n      shipsToModifie.forEach((ship, index) => {\n        const copyShip = ship;\n        // Iterates ships's spaces to know if it matchs with any content\n        ship.spaces.forEach((space) => {\n          if (cellContent === space) {\n            shipSelected = index;\n            // Updates how many cells have been selected in the ship\n            copyShip.selected = ship.selected + 1;\n            // Validates if all the ship cells have already been selected\n            if (ship.selected === ship.spaces.length) {\n              // If all the ship cells have already been selected changes status to destroyed\n              copyGridToModifie[cellClickId].status = 'destroyed';\n              destroyed = true;\n              // Updates pop up copy\n              updateCopyPopUp(`A ${shipsToModifie[shipSelected].name} has just been destroyed`);\n              // If the player is the cpu updates if previous onClick has been taken\n              if (cpuPlayer) {\n                prevComputerOnClickTaken.current = false;\n              }\n            } else {\n              // If not al the cells have been selected then updates status to hit\n              copyGridToModifie[cellClickId].status = 'hit';\n              // Updates pop up copy\n              updateCopyPopUp(`A ${shipsToModifie[shipSelected].name} has just been hitten`);\n              if (cpuPlayer) {\n                prevComputerOnClickTaken.current = true;\n              }\n            }\n          }\n        });\n      });\n    } else {\n      // If there is no ship in cell selected then status should be missed\n      copyGridToModifie[cellClickId].status = 'missed';\n      // Updates pop up copy\n      updateCopyPopUp('Shot missed!');\n    }\n\n    // If there is a ship that was destroy, all the cells from that\n    // ship in the grid should be updated\n    if (destroyed) {\n      // Iterates cells\n      shipsToModifie[shipSelected].spaces.forEach((space) => {\n        gridToModifie.forEach((cell) => {\n          const cellCopy = cell;\n          // If cell content matchs space modifies status\n          if (cell.cellContent === space) {\n            cellCopy.status = 'destroyed';\n          }\n        });\n      });\n      // Validate if all ships in grid have been destroyed\n      allDestroyed = validateAllShipsWereDestroyed(shipsToModifie);\n    }\n\n    // Show pop up\n    updateShowPopUp(true);\n\n    // If not all have been destroyed retursn valua and ships and grid already modified\n    return {\n      allDestroyed,\n      shipsToModifie,\n      gridToModifie,\n    };\n  };\n\n  /**\n   * Function that generates click on computer grid\n   *\n   * @return { Number }\n   */\n  const generateComputerClick = () => {\n    // Default value\n    let randomClick = 0;\n    // Options in case there is a logic that needs to be use when one click matchs with a ship\n    const options = {\n      1: prevComputerOnClickCell.current + 1,\n      2: prevComputerOnClickCell.current - 1,\n      3: prevComputerOnClickCell.current + 10,\n      4: prevComputerOnClickCell.current - 10,\n    };\n    // If previous click was not a ship, generates randomclick\n    if (prevComputerOnClickTaken.current === false) {\n      randomClick = Math.floor(Math.random() * 99);\n      // If previous click was a ship generates logic to sink the boat\n      // Validates if all the options arround the previous valid click has been selected\n    } else if (prevOptionSelected.current > Object.keys(options).length) {\n      // If all the options arroun the preovious valid click has been\n      // selected gets the first valid cell to continue with it's options\n      prevComputerOnClickCell.current = prevComputerOnClickCellValidfirst.current;\n      // Changes prevOptions to start from the first one\n      prevOptionSelected.current = 0;\n      // Generates click with first option\n      randomClick = options[prevOptionSelected.current + 1];\n    } else {\n      // Generates click with the next option\n      randomClick = options[prevOptionSelected.current + 1];\n      // Updates prev options\n      prevOptionSelected.current += 1;\n    }\n\n    return randomClick;\n  };\n\n  /**\n   * Function that is executed every time one of the players wins the game\n   * @param { String } player\n   */\n  const redirect = (player) => {\n    // Updates in store the player who won\n    dispatch(updateWinner(player));\n    // Redirects to the end game screen\n    history.push('/end');\n  };\n\n  /**\n   * Function that is executed after each onclick in user grid, generates a\n   * random click on computer grid and simulates a player actions\n   */\n  const onClickCellComputer = () => {\n    const modifiedGridComputer = JSON.parse(JSON.stringify(userGridGame));\n    const modifiedShipsComputer = JSON.parse(JSON.stringify(shipsSelectedUser));\n\n    // Generates computer click\n    const computerClick = generateComputerClick();\n\n    // Validates if cell selected has not already been selected and is not undefined\n    if (modifiedGridComputer[computerClick] !== undefined\n      && modifiedGridComputer[computerClick].status !== 'hit'\n      && modifiedGridComputer[computerClick].status !== 'destroyed'\n      && modifiedGridComputer[computerClick].status !== 'missed') {\n      // Validates if there is a ship in cell selected\n      let foundShip = false;\n      if (modifiedGridComputer[computerClick].cellContent !== 'sea') {\n        // Updates prev computer click with ship in cell\n        prevComputerOnClickCell.current = computerClick;\n        foundShip = true;\n        prevOptionSelected.current = 0;\n      }\n\n      // If prev click did not had a ship, updates with new cell\n      if (!prevComputerOnClickTaken.current) {\n        prevComputerOnClickCellValidfirst.current = computerClick;\n        prevOptionSelected.current = 0;\n      }\n\n      // Updates grid an ships\n      const gridAndShipsComputerModified = modifieGridAndShips(modifiedGridComputer,\n        modifiedShipsComputer, computerClick, foundShip,\n        modifiedGridComputer[computerClick].cellContent, true);\n      // Destructurin the results\n      const {\n        allDestroyed = false,\n        shipsToModifie = [],\n        gridToModifie = [],\n      } = gridAndShipsComputerModified;\n\n      // If all ships were destroyed redirect to end game\n      if (allDestroyed) {\n        redirect('CPU');\n      }\n\n      // Updates grid\n      updateShipsSelectedUser(shipsToModifie);\n      updateUserGrid(gridToModifie);\n\n      // Adds set time out to give time to pop up to hide\n      setTimeout(() => {\n        // Enables usergrid\n        updateEnableUserGrid(true);\n        // Modifies the turn, now it should show that it's user turn\n        updateUserTurn(true);\n      }, 1000);\n    } else {\n      // If the cell selected has already been selected then select a cell again\n      onClickCellComputer();\n    }\n  };\n\n  /**\n   * Function that is executed when onClick in one of the cells of the userGrid\n   * @param { Object } cell\n   */\n  const onClickCellUser = (cell) => {\n    // Destructuring cell\n    const {\n      id = 0,\n      status = 'empty',\n      taken = false,\n      cellContent = 'sea',\n    } = cell;\n\n    // Validates if cell has not been already selected before\n    if (status !== 'hit' && status !== 'missed' && status !== 'destroyed') {\n      // Validates if on that cell selected exists a ship\n      let foundShip = false;\n      if (taken) {\n        foundShip = true;\n      }\n\n      const modifiedUserGrid = JSON.parse(JSON.stringify(computerGridGame));\n      const modifiedUserShips = JSON.parse(JSON.stringify(shipsSelectedComputer));\n\n      // Modifies grid and ship according to what have been found in cell\n      const gridAndShipsUserModified = modifieGridAndShips(modifiedUserGrid,\n        modifiedUserShips, id, foundShip, cellContent);\n      // Destructuring the return value\n      const {\n        allDestroyed = false,\n        shipsToModifie = [],\n        gridToModifie = [],\n      } = gridAndShipsUserModified;\n\n      // If all ships where destroyed\n      if (allDestroyed) {\n        redirect(user);\n      }\n\n      // Updates grid and ship\n      updateShipsSelectedComputer(shipsToModifie);\n      updateComputerGrid(gridToModifie);\n      // Disables user grid\n      updateEnableUserGrid(false);\n      // Updates the user turns, now it should show it's CPU turn\n      updateUserTurn(false);\n\n      // Generates a settimeout to generate a click on computer grid after 2 seconds\n      setTimeout(() => { onClickCellComputer(); }, 2000);\n    }\n  };\n\n  return (\n    <GameScreenContainer>\n      <div data-testid=\"popUp-container\">\n        <PopUp copy={copyPopUp} show={showPopUp} hidePopUp={() => { updateShowPopUp(false); }} />\n      </div>\n      <div className=\"title\">\n        <h1>Now play!</h1>\n        <h3>BattleShip</h3>\n      </div>\n      <div className=\"player-turn\">\n        <p>\n          Player:\n          {userTurn ? user : 'CPU'}\n        </p>\n      </div>\n      <div className=\"grids-container\">\n        <div className=\"first-column\">\n          <div data-testid=\"grid-container-computer\" className=\"grid-container\">\n            <p className=\"grid-name\">CPU</p>\n            <Grid data-testid=\"grid-grid\" enableGrid={false} grid={userGridGame} gridName=\"user\" />\n          </div>\n        </div>\n        <div className=\"second-column\">\n          <div data-testid=\"grid-container-user\" className=\"grid-container\">\n            <p className=\"grid-name\">{user}</p>\n            <Grid onClickCell={(cell) => onClickCellUser(cell)} data-testid=\"grid-grid\" enableGrid={enableUserGrid} grid={computerGridGame} gridName=\"user\" />\n          </div>\n        </div>\n      </div>\n      <div className=\"button-row\">\n        <div className=\"button-container\">\n          <button data-testid=\"surrender-button\" type=\"button\" onClick={() => redirect('CPU')}>\n            Surrender\n          </button>\n        </div>\n      </div>\n    </GameScreenContainer>\n  );\n};\n\nexport default StartScreen;\n","/**\n * @desc Dependencies\n */\nimport styled from 'styled-components';\n\nconst EndGameScreen = styled.div`\nwidth: 90%;\nmax-width: 1240px;\nmargin: 0 auto;\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\ntext-align: center;\nheight: 100vh;\n\n  .winner-container {\n    width: 300px;\n    height: 200px;\n    \n\n    .winner {\n      font-size: 30px;\n      text-align: center;\n    }\n  }\n`;\n\nexport default EndGameScreen;\n","/**\n * @desc Dependencies\n */\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\n/**\n * @desc styled components\n */\nimport EndGameScreen from './style';\n\nconst StartScreen = () => {\n  // Store\n  const winner = useSelector((state) => state.winner);\n\n  return (\n    <EndGameScreen data-testid=\"end-game-container\">\n      <div className=\"winner-container\">\n        <p className=\"winner\">\n          The winner is:\n        </p>\n        <p className=\"winner\">\n          {winner}\n        </p>\n      </div>\n    </EndGameScreen>\n  );\n};\n\nexport default StartScreen;\n","/**\n * @desc Dependencies\n */\nimport React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\n/**\n * @desc Components\n */\nimport PrivateRoute from '../Components/PrivateRoute/PrivateRoute';\n\n/**\n * @desc Views\n */\nimport StartScreen from '../Views/StartScreen/StartScreen';\nimport GameScreen from '../Views/GameScreen/GameScreen';\nimport EndGameScreen from '../Views/EndGameScreen/EndGameScreen';\n\nconst Routes = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={StartScreen} />\n      <PrivateRoute exact path=\"/game\" component={GameScreen} />\n      <PrivateRoute exact path=\"/end\" component={EndGameScreen} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Routes;\n","/**\n * @desc Dependencies\n */\nimport { createGlobalStyle } from 'styled-components';\n\n/**\n * @desc Variables\n */\nimport Colors from './Variables';\n\nconst GlobalStyle = createGlobalStyle`\n  *{\n    margin: 0;\n    padding: 0;\n    list-style: none;\n    text-decoration: none;\n    border: none;\n    outline: none;\n    background-color: transparent;\n    box-sizing: border-box;\n    color: ${Colors.grey};\n  }\n\n  ol, ul {\n    list-style: none;\n  }\n\n  p {\n    color: ${Colors.grey}\n  }\n\n  button {\n    border: 2px solid ${Colors.grey};\n    border-radius: 5px;\n    padding: 10px;\n    margin: 10px 0;\n    width: 100%;\n    text-transform: uppercase;\n\n    &.dark {\n      background-color: ${Colors.grey};\n      color: ${Colors.white}\n    }\n  }\n`;\n\nexport default GlobalStyle;\n","/**\n * @desc Dependencies\n */\nimport React from 'react';\nimport { Provider } from 'react-redux';\n\n/**\n * @desc Store\n */\nimport Store from './Config/Store';\n\n/**\n * @desc Configs\n */\nimport Routes from './Config/Routes';\n\n/**\n * @desc Styled Components\n */\nimport GlobalStyle from './MainStyles/GlobalStyle';\n\nconst App = () => (\n  <>\n    <GlobalStyle />\n    <Provider store={Store}>\n      <Routes />\n    </Provider>\n  </>\n);\n\nexport default App;\n","import 'core-js'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}